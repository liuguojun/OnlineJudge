/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:

    TreeNode *buildTree(vector<int>::iterator b1, vector<int>::iterator e1, vector<int>::iterator b2, vector<int>::iterator e2) {
        
        if (b1 == e1 || b2 == e2)
            return NULL;
        
        if (b1+1 == e1) {
            TreeNode* node = new TreeNode(*b1);
            return node;
        }
        
        vector<int>::iterator iter = find(b1, e1, *(e2-1));
        
        TreeNode* node = new TreeNode(*iter);
        
        node->left = buildTree(b1, iter, b2, b2+(iter-b1));     
        node->right = buildTree(iter+1, e1, b2+(iter-b1), e2-1);
        
        return node;    
        
    }
    TreeNode *buildTree(vector<int> &inorder, vector<int> &postorder) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        if (inorder.empty() || postorder.empty())
            return NULL;
        
        if (inorder.size() == 1) {
            TreeNode* node = new TreeNode(inorder[0]);
            return node;
        }
        
         
        return buildTree(inorder.begin(), inorder.end(), postorder.begin(), postorder.end());
        
    }
};