class Solution {
public:

    bool check(vector<vector<char> > &board, vector<vector<bool> > &visited, int x, int y, string& word, int k) {
        
        if (word[k] != board[x][y])
            return false;
        
        if (visited[x][y])
            return false;
        
        if (k+1 == word.length())
            return true;
        
        int M = board.size();
        int N = board[0].size();
        
        visited[x][y] = true;
        
        if (x>0 && !visited[x-1][y] && check(board, visited, x-1, y, word, k+1))
            return true;
        
        if (x+1 < M && !visited[x+1][y] && check(board, visited, x+1, y, word, k+1))
            return true;
        
        if (y>0 && !visited[x][y-1] && check(board, visited, x, y-1, word, k+1))
            return true;
            
        if (y+1 < N && !visited[x][y+1] && check(board, visited, x, y+1, word, k+1))
            return true;
            
        visited[x][y] = false;
        
        return false;
        
        
        
    }
    
    
    bool exist(vector<vector<char> > &board, string word) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        
        if (board.empty())
            return false;
            
        
        int M = board.size();
        int N = board[0].size();
        
        if (N == 0)
            return false;
    
        vector<vector<bool> > visited(M, vector<bool>(N, false));
        
        for (int i = 0; i < M; ++i)
            for (int j = 0; j < N; ++j)
                if (check(board, visited, i, j, word, 0))
                    return true;
        
        return false;
    }
};