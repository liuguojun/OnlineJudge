/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *reverseBetween(ListNode *head, int m, int n) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        if (head == NULL)
            return NULL;
        
        ListNode tmphead(0);
        tmphead.next = head;
        
        ListNode* prev = &tmphead;
        ListNode* start = head;
        ListNode* end = head;
        ListNode* curr = head;
        int index = 1;
        
        while (curr != NULL) {
            if (index < m) {
                start = start->next; 
                prev = prev->next;
            } 
            
            if (index < n) {
                end = end->next;
            }
            
            curr = curr->next;
            ++index;
            
            if (index == n)
                break;
        }
        
        ListNode* last = end->next;
        prev->next = end;
        end->next = NULL;
        
        ListNode* p1 = last;
        ListNode* p2 = start;
        while (p2 != NULL) {
            ListNode* tmp = p2->next;
            p2->next = p1;
            p1 = p2;
            p2 = tmp;
        }
        
        return tmphead.next;
        
        
    }
};