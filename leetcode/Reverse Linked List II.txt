/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *reverseBetween(ListNode *head, int m, int n) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        if (head == NULL)
            return 0;
        
        ListNode tmphead(0);
        tmphead.next = head;
        
        // 先找出m, n 所在的点
        ListNode* prev = &tmphead;
        ListNode* begin = head;
        ListNode* end = head;
        
        int index = 1;
        
        while (index < m) {
            prev = prev->next;
            begin = begin->next;
            end = end->next;
            ++index;
        }
        
        while (index < n) {
            end = end->next;
            ++index;
        }
        
        
        ListNode* post = end->next;
        
        end->next = NULL;
        
        
        //下面是标准的倒置链表
        
        ListNode* curr = begin->next;
        ListNode* left = begin;
        
        while (curr) {
            ListNode* right = curr->next;
            curr->next = left;
            
            left = curr;
            curr = right;        
        }
        
        
        prev->next = end;
        begin->next = post;
        
        return tmphead.next;
        
        
    }
};